
// Generated from ./VMLexer.g4 by ANTLR 4.13.2


#include "VMLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct VMLexerStaticData final {
  VMLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  VMLexerStaticData(const VMLexerStaticData&) = delete;
  VMLexerStaticData(VMLexerStaticData&&) = delete;
  VMLexerStaticData& operator=(const VMLexerStaticData&) = delete;
  VMLexerStaticData& operator=(VMLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag vmlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<VMLexerStaticData> vmlexerLexerStaticData = nullptr;

void vmlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (vmlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(vmlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<VMLexerStaticData>(
    std::vector<std::string>{
      "LPAREN", "RPAREN", "START_BLOCK", "END_BLOCK", "SUM", "SUB", "MUL", 
      "DIV", "LESS", "LESSEQUAL", "GREATER", "GREATEREQUAL", "EQUAL", "NEQ", 
      "EQEQ", "AND", "OR", "RW_FOR", "RW_IF", "RW_END", "RW_DECLAREFUNCTION", 
      "RW_CALLFUNCTION", "RW_RETURN", "RW_STRUCTURE", "RW_ARRAY", "RESERVEDWORDS", 
      "COMMA", "SEMICOLON", "COLON", "LBRACKET", "RBRACKET", "LINE_COMMENT", 
      "STRING", "COMMENT", "ID", "NUMBER", "BOOL", "NULL", "WS", "DOT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'('", "')'", "'{'", "'}'", "'+'", "'-'", "'*'", "'/'", "'<'", 
      "'<='", "'>'", "'>='", "'='", "'!='", "'=='", "'&&'", "'||'", "'@_for'", 
      "'@si'", "'@_end'", "'@declare funcion'", "'@call'", "'@retornar'", 
      "'@estructura'", "'@array'", "'@'", "','", "';'", "':'", "'['", "']'", 
      "", "", "", "", "", "", "'@NNULL'", "", "'.'"
    },
    std::vector<std::string>{
      "", "LPAREN", "RPAREN", "START_BLOCK", "END_BLOCK", "SUM", "SUB", 
      "MUL", "DIV", "LESS", "LESSEQUAL", "GREATER", "GREATEREQUAL", "EQUAL", 
      "NEQ", "EQEQ", "AND", "OR", "RW_FOR", "RW_IF", "RW_END", "RW_DECLAREFUNCTION", 
      "RW_CALLFUNCTION", "RW_RETURN", "RW_STRUCTURE", "RW_ARRAY", "RESERVEDWORDS", 
      "COMMA", "SEMICOLON", "COLON", "LBRACKET", "RBRACKET", "LINE_COMMENT", 
      "STRING", "COMMENT", "ID", "NUMBER", "BOOL", "NULL", "WS", "DOT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,40,297,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,1,0,1,0,1,1,1,1,1,2,1,2,
  	1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,
  	1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,
  	1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,
  	1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
  	1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,
  	1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,
  	1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,
  	1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,
  	1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,5,32,211,8,32,10,32,12,32,214,
  	9,32,1,32,1,32,1,33,1,33,1,33,1,33,5,33,222,8,33,10,33,12,33,225,9,33,
  	1,33,1,33,1,33,1,33,1,33,1,34,1,34,5,34,234,8,34,10,34,12,34,237,9,34,
  	1,35,3,35,240,8,35,1,35,4,35,243,8,35,11,35,12,35,244,1,35,1,35,4,35,
  	249,8,35,11,35,12,35,250,3,35,253,8,35,1,35,1,35,3,35,257,8,35,1,35,4,
  	35,260,8,35,11,35,12,35,261,3,35,264,8,35,1,36,1,36,1,36,1,36,1,36,1,
  	36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,280,8,36,1,37,1,37,1,
  	37,1,37,1,37,1,37,1,37,1,38,4,38,290,8,38,11,38,12,38,291,1,38,1,38,1,
  	39,1,39,2,212,223,0,40,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
  	21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
  	22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
  	67,34,69,35,71,36,73,37,75,38,77,39,79,40,1,0,8,2,0,10,10,13,13,2,0,34,
  	34,39,39,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,
  	2,0,69,69,101,101,2,0,43,43,45,45,3,0,9,10,13,13,32,32,308,0,1,1,0,0,
  	0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
  	0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
  	0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
  	35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
  	0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
  	0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
  	67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,
  	0,0,0,0,79,1,0,0,0,1,81,1,0,0,0,3,83,1,0,0,0,5,85,1,0,0,0,7,87,1,0,0,
  	0,9,89,1,0,0,0,11,91,1,0,0,0,13,93,1,0,0,0,15,95,1,0,0,0,17,97,1,0,0,
  	0,19,99,1,0,0,0,21,102,1,0,0,0,23,104,1,0,0,0,25,107,1,0,0,0,27,109,1,
  	0,0,0,29,112,1,0,0,0,31,115,1,0,0,0,33,118,1,0,0,0,35,121,1,0,0,0,37,
  	127,1,0,0,0,39,131,1,0,0,0,41,137,1,0,0,0,43,154,1,0,0,0,45,160,1,0,0,
  	0,47,170,1,0,0,0,49,182,1,0,0,0,51,189,1,0,0,0,53,191,1,0,0,0,55,193,
  	1,0,0,0,57,195,1,0,0,0,59,197,1,0,0,0,61,199,1,0,0,0,63,201,1,0,0,0,65,
  	208,1,0,0,0,67,217,1,0,0,0,69,231,1,0,0,0,71,239,1,0,0,0,73,279,1,0,0,
  	0,75,281,1,0,0,0,77,289,1,0,0,0,79,295,1,0,0,0,81,82,5,40,0,0,82,2,1,
  	0,0,0,83,84,5,41,0,0,84,4,1,0,0,0,85,86,5,123,0,0,86,6,1,0,0,0,87,88,
  	5,125,0,0,88,8,1,0,0,0,89,90,5,43,0,0,90,10,1,0,0,0,91,92,5,45,0,0,92,
  	12,1,0,0,0,93,94,5,42,0,0,94,14,1,0,0,0,95,96,5,47,0,0,96,16,1,0,0,0,
  	97,98,5,60,0,0,98,18,1,0,0,0,99,100,5,60,0,0,100,101,5,61,0,0,101,20,
  	1,0,0,0,102,103,5,62,0,0,103,22,1,0,0,0,104,105,5,62,0,0,105,106,5,61,
  	0,0,106,24,1,0,0,0,107,108,5,61,0,0,108,26,1,0,0,0,109,110,5,33,0,0,110,
  	111,5,61,0,0,111,28,1,0,0,0,112,113,5,61,0,0,113,114,5,61,0,0,114,30,
  	1,0,0,0,115,116,5,38,0,0,116,117,5,38,0,0,117,32,1,0,0,0,118,119,5,124,
  	0,0,119,120,5,124,0,0,120,34,1,0,0,0,121,122,5,64,0,0,122,123,5,95,0,
  	0,123,124,5,102,0,0,124,125,5,111,0,0,125,126,5,114,0,0,126,36,1,0,0,
  	0,127,128,5,64,0,0,128,129,5,115,0,0,129,130,5,105,0,0,130,38,1,0,0,0,
  	131,132,5,64,0,0,132,133,5,95,0,0,133,134,5,101,0,0,134,135,5,110,0,0,
  	135,136,5,100,0,0,136,40,1,0,0,0,137,138,5,64,0,0,138,139,5,100,0,0,139,
  	140,5,101,0,0,140,141,5,99,0,0,141,142,5,108,0,0,142,143,5,97,0,0,143,
  	144,5,114,0,0,144,145,5,101,0,0,145,146,5,32,0,0,146,147,5,102,0,0,147,
  	148,5,117,0,0,148,149,5,110,0,0,149,150,5,99,0,0,150,151,5,105,0,0,151,
  	152,5,111,0,0,152,153,5,110,0,0,153,42,1,0,0,0,154,155,5,64,0,0,155,156,
  	5,99,0,0,156,157,5,97,0,0,157,158,5,108,0,0,158,159,5,108,0,0,159,44,
  	1,0,0,0,160,161,5,64,0,0,161,162,5,114,0,0,162,163,5,101,0,0,163,164,
  	5,116,0,0,164,165,5,111,0,0,165,166,5,114,0,0,166,167,5,110,0,0,167,168,
  	5,97,0,0,168,169,5,114,0,0,169,46,1,0,0,0,170,171,5,64,0,0,171,172,5,
  	101,0,0,172,173,5,115,0,0,173,174,5,116,0,0,174,175,5,114,0,0,175,176,
  	5,117,0,0,176,177,5,99,0,0,177,178,5,116,0,0,178,179,5,117,0,0,179,180,
  	5,114,0,0,180,181,5,97,0,0,181,48,1,0,0,0,182,183,5,64,0,0,183,184,5,
  	97,0,0,184,185,5,114,0,0,185,186,5,114,0,0,186,187,5,97,0,0,187,188,5,
  	121,0,0,188,50,1,0,0,0,189,190,5,64,0,0,190,52,1,0,0,0,191,192,5,44,0,
  	0,192,54,1,0,0,0,193,194,5,59,0,0,194,56,1,0,0,0,195,196,5,58,0,0,196,
  	58,1,0,0,0,197,198,5,91,0,0,198,60,1,0,0,0,199,200,5,93,0,0,200,62,1,
  	0,0,0,201,202,5,47,0,0,202,203,5,47,0,0,203,204,1,0,0,0,204,205,8,0,0,
  	0,205,206,1,0,0,0,206,207,6,31,0,0,207,64,1,0,0,0,208,212,7,1,0,0,209,
  	211,9,0,0,0,210,209,1,0,0,0,211,214,1,0,0,0,212,213,1,0,0,0,212,210,1,
  	0,0,0,213,215,1,0,0,0,214,212,1,0,0,0,215,216,7,1,0,0,216,66,1,0,0,0,
  	217,218,5,47,0,0,218,219,5,42,0,0,219,223,1,0,0,0,220,222,9,0,0,0,221,
  	220,1,0,0,0,222,225,1,0,0,0,223,224,1,0,0,0,223,221,1,0,0,0,224,226,1,
  	0,0,0,225,223,1,0,0,0,226,227,5,42,0,0,227,228,5,47,0,0,228,229,1,0,0,
  	0,229,230,6,33,0,0,230,68,1,0,0,0,231,235,7,2,0,0,232,234,7,3,0,0,233,
  	232,1,0,0,0,234,237,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,70,1,
  	0,0,0,237,235,1,0,0,0,238,240,5,45,0,0,239,238,1,0,0,0,239,240,1,0,0,
  	0,240,242,1,0,0,0,241,243,7,4,0,0,242,241,1,0,0,0,243,244,1,0,0,0,244,
  	242,1,0,0,0,244,245,1,0,0,0,245,252,1,0,0,0,246,248,5,46,0,0,247,249,
  	7,4,0,0,248,247,1,0,0,0,249,250,1,0,0,0,250,248,1,0,0,0,250,251,1,0,0,
  	0,251,253,1,0,0,0,252,246,1,0,0,0,252,253,1,0,0,0,253,263,1,0,0,0,254,
  	256,7,5,0,0,255,257,7,6,0,0,256,255,1,0,0,0,256,257,1,0,0,0,257,259,1,
  	0,0,0,258,260,7,4,0,0,259,258,1,0,0,0,260,261,1,0,0,0,261,259,1,0,0,0,
  	261,262,1,0,0,0,262,264,1,0,0,0,263,254,1,0,0,0,263,264,1,0,0,0,264,72,
  	1,0,0,0,265,266,5,118,0,0,266,267,5,101,0,0,267,268,5,114,0,0,268,269,
  	5,100,0,0,269,270,5,97,0,0,270,271,5,100,0,0,271,272,5,101,0,0,272,273,
  	5,114,0,0,273,280,5,111,0,0,274,275,5,102,0,0,275,276,5,97,0,0,276,277,
  	5,108,0,0,277,278,5,115,0,0,278,280,5,111,0,0,279,265,1,0,0,0,279,274,
  	1,0,0,0,280,74,1,0,0,0,281,282,5,64,0,0,282,283,5,78,0,0,283,284,5,78,
  	0,0,284,285,5,85,0,0,285,286,5,76,0,0,286,287,5,76,0,0,287,76,1,0,0,0,
  	288,290,7,7,0,0,289,288,1,0,0,0,290,291,1,0,0,0,291,289,1,0,0,0,291,292,
  	1,0,0,0,292,293,1,0,0,0,293,294,6,38,0,0,294,78,1,0,0,0,295,296,5,46,
  	0,0,296,80,1,0,0,0,13,0,212,223,235,239,244,250,252,256,261,263,279,291,
  	1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  vmlexerLexerStaticData = std::move(staticData);
}

}

VMLexer::VMLexer(CharStream *input) : Lexer(input) {
  VMLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *vmlexerLexerStaticData->atn, vmlexerLexerStaticData->decisionToDFA, vmlexerLexerStaticData->sharedContextCache);
}

VMLexer::~VMLexer() {
  delete _interpreter;
}

std::string VMLexer::getGrammarFileName() const {
  return "VMLexer.g4";
}

const std::vector<std::string>& VMLexer::getRuleNames() const {
  return vmlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& VMLexer::getChannelNames() const {
  return vmlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& VMLexer::getModeNames() const {
  return vmlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& VMLexer::getVocabulary() const {
  return vmlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView VMLexer::getSerializedATN() const {
  return vmlexerLexerStaticData->serializedATN;
}

const atn::ATN& VMLexer::getATN() const {
  return *vmlexerLexerStaticData->atn;
}




void VMLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  vmlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(vmlexerLexerOnceFlag, vmlexerLexerInitialize);
#endif
}
